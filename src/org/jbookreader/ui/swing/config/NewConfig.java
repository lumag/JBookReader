

package org.jbookreader.ui.swing.config;

import java.util.LinkedList;
import java.util.List;

/**
 * This class represents a configuration for the application.
 */

public class NewConfig {



 /** the NAME property */ private Boolean myAntialias; /** value NAME changed listeners */ private List<ValueListener<Boolean>> myAntialiasListeners = new LinkedList<ValueListener<Boolean>>(); /** Returns the value. *//** @return the value. */ public Boolean getAntialias() { return this.myAntialias; } /** Sets new value. *//** @param value new value */ public void setAntialias(Boolean value) { Boolean oldValue = this.myAntialias; this.myAntialias = value; if (!value.equals(oldValue)) { ValueEvent<Boolean> event = new ValueEvent<Boolean>(this, value); for (ValueListener<Boolean> listener: this.myAntialiasListeners) { listener.valueChanged(event); } } } /** Adds new value changed event listener.*//** @param listener new listener. */ public void addAntialiasListener(ValueListener<Boolean> listener) { this.myAntialiasListeners.add(listener); } /** Removes value changed event listener.*//** @param listener new listener. */ public void removeAntialiasListener(ValueListener<Boolean> listener) { this.myAntialiasListeners.remove(listener); }
 /** the NAME property */ private String myFontFamily; /** value NAME changed listeners */ private List<ValueListener<String>> myFontFamilyListeners = new LinkedList<ValueListener<String>>(); /** Returns the value. *//** @return the value. */ public String getFontFamily() { return this.myFontFamily; } /** Sets new value. *//** @param value new value */ public void setFontFamily(String value) { String oldValue = this.myFontFamily; this.myFontFamily = value; if (!value.equals(oldValue)) { ValueEvent<String> event = new ValueEvent<String>(this, value); for (ValueListener<String> listener: this.myFontFamilyListeners) { listener.valueChanged(event); } } } /** Adds new value changed event listener.*//** @param listener new listener. */ public void addFontFamilyListener(ValueListener<String> listener) { this.myFontFamilyListeners.add(listener); } /** Removes value changed event listener.*//** @param listener new listener. */ public void removeFontFamilyListener(ValueListener<String> listener) { this.myFontFamilyListeners.remove(listener); }
 /** the NAME property */ private Integer myFontSize; /** value NAME changed listeners */ private List<ValueListener<Integer>> myFontSizeListeners = new LinkedList<ValueListener<Integer>>(); /** Returns the value. *//** @return the value. */ public Integer getFontSize() { return this.myFontSize; } /** Sets new value. *//** @param value new value */ public void setFontSize(Integer value) { Integer oldValue = this.myFontSize; this.myFontSize = value; if (!value.equals(oldValue)) { ValueEvent<Integer> event = new ValueEvent<Integer>(this, value); for (ValueListener<Integer> listener: this.myFontSizeListeners) { listener.valueChanged(event); } } } /** Adds new value changed event listener.*//** @param listener new listener. */ public void addFontSizeListener(ValueListener<Integer> listener) { this.myFontSizeListeners.add(listener); } /** Removes value changed event listener.*//** @param listener new listener. */ public void removeFontSizeListener(ValueListener<Integer> listener) { this.myFontSizeListeners.remove(listener); }

 /** the NAME property */ private Integer myMainX; /** value NAME changed listeners */ private List<ValueListener<Integer>> myMainXListeners = new LinkedList<ValueListener<Integer>>(); /** Returns the value. *//** @return the value. */ public Integer getMainX() { return this.myMainX; } /** Sets new value. *//** @param value new value */ public void setMainX(Integer value) { Integer oldValue = this.myMainX; this.myMainX = value; if (!value.equals(oldValue)) { ValueEvent<Integer> event = new ValueEvent<Integer>(this, value); for (ValueListener<Integer> listener: this.myMainXListeners) { listener.valueChanged(event); } } } /** Adds new value changed event listener.*//** @param listener new listener. */ public void addMainXListener(ValueListener<Integer> listener) { this.myMainXListeners.add(listener); } /** Removes value changed event listener.*//** @param listener new listener. */ public void removeMainXListener(ValueListener<Integer> listener) { this.myMainXListeners.remove(listener); }
 /** the NAME property */ private Integer myMainY; /** value NAME changed listeners */ private List<ValueListener<Integer>> myMainYListeners = new LinkedList<ValueListener<Integer>>(); /** Returns the value. *//** @return the value. */ public Integer getMainY() { return this.myMainY; } /** Sets new value. *//** @param value new value */ public void setMainY(Integer value) { Integer oldValue = this.myMainY; this.myMainY = value; if (!value.equals(oldValue)) { ValueEvent<Integer> event = new ValueEvent<Integer>(this, value); for (ValueListener<Integer> listener: this.myMainYListeners) { listener.valueChanged(event); } } } /** Adds new value changed event listener.*//** @param listener new listener. */ public void addMainYListener(ValueListener<Integer> listener) { this.myMainYListeners.add(listener); } /** Removes value changed event listener.*//** @param listener new listener. */ public void removeMainYListener(ValueListener<Integer> listener) { this.myMainYListeners.remove(listener); }
 /** the NAME property */ private Integer myMainHeight; /** value NAME changed listeners */ private List<ValueListener<Integer>> myMainHeightListeners = new LinkedList<ValueListener<Integer>>(); /** Returns the value. *//** @return the value. */ public Integer getMainHeight() { return this.myMainHeight; } /** Sets new value. *//** @param value new value */ public void setMainHeight(Integer value) { Integer oldValue = this.myMainHeight; this.myMainHeight = value; if (!value.equals(oldValue)) { ValueEvent<Integer> event = new ValueEvent<Integer>(this, value); for (ValueListener<Integer> listener: this.myMainHeightListeners) { listener.valueChanged(event); } } } /** Adds new value changed event listener.*//** @param listener new listener. */ public void addMainHeightListener(ValueListener<Integer> listener) { this.myMainHeightListeners.add(listener); } /** Removes value changed event listener.*//** @param listener new listener. */ public void removeMainHeightListener(ValueListener<Integer> listener) { this.myMainHeightListeners.remove(listener); }
 /** the NAME property */ private Integer myMainWidth; /** value NAME changed listeners */ private List<ValueListener<Integer>> myMainWidthListeners = new LinkedList<ValueListener<Integer>>(); /** Returns the value. *//** @return the value. */ public Integer getMainWidth() { return this.myMainWidth; } /** Sets new value. *//** @param value new value */ public void setMainWidth(Integer value) { Integer oldValue = this.myMainWidth; this.myMainWidth = value; if (!value.equals(oldValue)) { ValueEvent<Integer> event = new ValueEvent<Integer>(this, value); for (ValueListener<Integer> listener: this.myMainWidthListeners) { listener.valueChanged(event); } } } /** Adds new value changed event listener.*//** @param listener new listener. */ public void addMainWidthListener(ValueListener<Integer> listener) { this.myMainWidthListeners.add(listener); } /** Removes value changed event listener.*//** @param listener new listener. */ public void removeMainWidthListener(ValueListener<Integer> listener) { this.myMainWidthListeners.remove(listener); }

 /** the NAME property */ private Boolean myWindowsDecorated; /** value NAME changed listeners */ private List<ValueListener<Boolean>> myWindowsDecoratedListeners = new LinkedList<ValueListener<Boolean>>(); /** Returns the value. *//** @return the value. */ public Boolean getWindowsDecorated() { return this.myWindowsDecorated; } /** Sets new value. *//** @param value new value */ public void setWindowsDecorated(Boolean value) { Boolean oldValue = this.myWindowsDecorated; this.myWindowsDecorated = value; if (!value.equals(oldValue)) { ValueEvent<Boolean> event = new ValueEvent<Boolean>(this, value); for (ValueListener<Boolean> listener: this.myWindowsDecoratedListeners) { listener.valueChanged(event); } } } /** Adds new value changed event listener.*//** @param listener new listener. */ public void addWindowsDecoratedListener(ValueListener<Boolean> listener) { this.myWindowsDecoratedListeners.add(listener); } /** Removes value changed event listener.*//** @param listener new listener. */ public void removeWindowsDecoratedListener(ValueListener<Boolean> listener) { this.myWindowsDecoratedListeners.remove(listener); }
}
